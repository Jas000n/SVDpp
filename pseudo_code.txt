SVD++ Algorithm:
Input:  m       # numbers of users
        n       # numbers of items
        k       # the length of p & q, hyper-parameter
        p_u     # vector of user preference
        q_i     # vector of item quality
        b_i     # item bias
        b_u     # user bias
        y_j     # implicit feed back on item j
        epochs  # total epochs
        lr      # learning rate
        decay   # decay of learning rate
        l1      # regularization parameter1
        l2      # regularization parameter2
        ts      # training set
        rui     # error of the u_th user on i-th item
initialize all the vectors, both for users and items
for epoch in epochs: # in each epoch:
    for data in training set:
        calculate rui;
        update weights in vectors:
            b_u = b_u + lr * (eui - l1 * b_u)
            b_i = b_i + lr * (eui - l1 * b_i)
            q_i = q_i + lr * (eui * (p_u + 1 / (len(R(U)) ** 0.5) * sigmaYj(u)) - l2 * q_i)
            p_u = p_u + lr * (eui * q_i - l2 * p_u)
            for j in R(u):
                y_j = y_j + lr * (eui * 1 / (len(R(u)) ** 0.5) * q_i - l2 * y_j)
    print training time, calculate MAE and RMSE loss;
    lr = lr * decay


